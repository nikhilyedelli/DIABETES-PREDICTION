# -*- coding: utf-8 -*-
"""DIABETES PREDICTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BUxopVcTtTRDTcyO5Ictt7icIbYY85-y
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/diabetes (1).csv')

pd.read_csv?

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0---> non diabetic
1---> diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

x=diabetes_dataset.drop(columns='Outcome',axis=1)
y=diabetes_dataset['Outcome']

print(x)

print(y)

scaler=StandardScaler()

scaler.fit(x)

Standardized_data=scaler.transform(x)

print(Standardized_data)

x=Standardized_data
y=diabetes_dataset['Outcome']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

classifier=svm.SVC(kernel='linear')

classifier.fit(x_train,y_train)

x_train_prediction=classifier.predict(x_train)
 training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('accuracy score of the training data:',training_data_accuracy)

y_test_prediction=classifier.predict(x_test)
test_data_accuracy=accuracy_score(y_test_prediction,y_test)

print('accuracy score of the test data:',test_data_accuracy)

input_data=[6	,148,	72,	35,	0	,33.6	,0.627,	50	]
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

std_data=scaler.transform(input_data_reshaped)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)

if prediction[0]==0:
  print('the person is not diabetic')
else:
  print('the person is diabetic')

import pickle

file='trained_model.sav'
pickle.dump(classifier,open(file,'wb'))

loaded_model=pickle.load(open('trained_model.sav','rb'))

input_data=[6	,148,	72,	35,	0	,33.6	,0.627,	50	]
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
std_data=scaler.transform(input_data_reshaped)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)
if(prediction[0]==0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')
#

